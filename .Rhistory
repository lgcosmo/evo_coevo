z_var=1
z = rnorm(10000, mean=z_u, sd=sqrt(z_var)) #Sampling from a normal distribution with mean=5 and variance=1 (the standard deviation is equal to the square root of the variance).
# Plotting the distribution
ggplot(data=data.frame(z))+
geom_density(aes(x=z))+
xlab("Trait value")+ylab("Density")+
theme_pubr()
#Defining the parameters of the fitness functions:
e=rnorm(1000, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
#Defining the parameters of the fitness functions:
e=rnorm(10000, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
delta_zvar=cov(w1,(z-mean(z))^2)/mean(w1) #Change in the variance of z
# Getting new distribution of trait values
z_new=rnorm(10000, mean=z_u+delta_z, sd=sqrt(z_var+delta_z))
ggplot(data=data.frame(z=z, z_new=z_new))+
geom_density(aes(x=z), linetype="dashed")+
geom_density(aes(x=z_new))+
xlab("Trait value")+ylab("Counts")+
theme_pubr()
cov(w1,z)
#Defining the parameters of the fitness functions:
e=rnorm(10000, mean=0, sd=0.5) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
cov(w1,z)
library(ggplot2)
library(ggpubr)
z_u=5
z_var=1
z = rnorm(1000, mean=z_u, sd=sqrt(z_var)) #Sampling from a normal distribution with mean=5 and variance=1 (the standard deviation is equal to the square root of the variance).
# Plotting the distribution
ggplot(data=data.frame(z))+
geom_density(aes(x=z))+
xlab("Trait value")+ylab("Density")+
theme_pubr()
#Defining the parameters of the fitness functions:
e=rnorm(1000, mean=0, sd=0.5) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
delta_zvar=cov(w1,(z-mean(z))^2)/mean(w1) #Change in the variance of z
# Getting new distribution of trait values
z_new=rnorm(1000, mean=z_u+delta_z, sd=sqrt(z_var+delta_z))
ggplot(data=data.frame(z=z, z_new=z_new))+
geom_density(aes(x=z), linetype="dashed")+
geom_density(aes(x=z_new))+
xlab("Trait value")+ylab("Counts")+
theme_pubr()
cov(w1,z)
#Defining the parameters of the fitness functions:
e=rnorm(1000, mean=0, sd=1) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
cov(w1,z)
#Defining the parameters of the fitness functions:
e=rnorm(1000, mean=0, sd=2) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
cov(w1,z)
cov(w1,z)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
delta_zvar=cov(w1,(z-mean(z))^2)/mean(w1) #Change in the variance of z
# Getting new distribution of trait values
z_new=rnorm(n, mean=z_u+delta_z, sd=sqrt(z_var+delta_z))
library(ggplot2)
library(ggpubr)
n=10000 #Population size
z_u=5 #Mean trait value
z_var=1 #Variance
z = rnorm(n, mean=z_u, sd=sqrt(z_var)) #Sampling from a normal distribution with mean=5 and variance=1 (the standard deviation is equal to the square root of the variance).
# Plotting the distribution
ggplot(data=data.frame(z))+
geom_density(aes(x=z))+
xlab("Trait value")+ylab("Density")+
theme_pubr()
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
delta_zvar=cov(w1,(z-mean(z))^2)/mean(w1) #Change in the variance of z
# Getting new distribution of trait values
z_new=rnorm(n, mean=z_u+delta_z, sd=sqrt(z_var+delta_z))
ggplot(data=data.frame(z=z, z_new=z_new))+
geom_density(aes(x=z), linetype="dashed")+
geom_density(aes(x=z_new))+
xlab("Trait value")+ylab("Counts")+
theme_pubr()
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
library(ggplot2)
library(ggpubr)
n=10000 #Population size
z_u=5 #Mean trait value
z_var=1 #Variance
z = rnorm(n, mean=z_u, sd=sqrt(z_var)) #Sampling from a normal distribution with mean=5 and variance=1 (the standard deviation is equal to the square root of the variance).
# Plotting the distribution
ggplot(data=data.frame(z))+
geom_density(aes(x=z))+
xlab("Trait value")+ylab("Density")+
theme_pubr()
library(ggplot2)
library(ggpubr)
n=10000 #Population size
z_u=5 #Mean trait value
z_var=1 #Variance
z = rnorm(n, mean=z_u, sd=sqrt(z_var)) #Sampling from a normal distribution with mean=5 and variance=1 (the standard deviation is equal to the square root of the variance).
# Plotting the distribution
ggplot(data=data.frame(z))+
geom_density(aes(x=z))+
xlab("Trait value")+ylab("Density")+
theme_pubr()
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.2; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
delta_z=cov(w1,z)/mean(w1) #Change in the mean of z
delta_zvar=cov(w1,(z-mean(z))^2)/mean(w1) #Change in the variance of z
# Getting new distribution of trait values
z_new=rnorm(n, mean=z_u+delta_z, sd=sqrt(z_var+delta_z))
ggplot(data=data.frame(z=z, z_new=z_new))+
geom_density(aes(x=z), linetype="dashed")+
geom_density(aes(x=z_new))+
xlab("Trait value")+ylab("Counts")+
theme_pubr()
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
stat_regline_equation()+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
stat_regline_equation()+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
stat_regline_equation()+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
stat_regline_equation()+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z)^2+e)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z+e)^2)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=exp(-alpha*(theta-z+e)^2)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=3.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=1+exp(-alpha*(theta-z+e)^2)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=2.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=1+exp(-alpha*(theta-z+e)^2)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
#Defining the parameters of the fitness functions:
e=rnorm(n, mean=0, sd=0.05) #Sampling random noise
c=1 # Parameter of fitness function (1)
beta=0.5 # Parameter of fitness functions (2)
alpha=0.5; theta=4.0 # Parameters of fitness function (3)
w1=1+c+e
w2=1+beta*z+e
w3=1+exp(-alpha*(theta-z+e)^2)
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
xlab("Trait values")+ylab("Fitness (function #2)")+
geom_smooth(method="lm")+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
xlab("Squared deviation of trait values to the mean")+ylab("Fitness (function #2)")+
geom_smooth(method="lm")+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
xlab("Trait values")+ylab("Fitness (function #3)")+
geom_smooth(method="lm")+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
xlab("Squared deviation of trait values to the mean")+ylab("Fitness (function #3)")+
geom_smooth(method="lm")+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
library(patchwork)
# Creating a data frame with variables z, the squared deviations of z to the mean, and the fitness of individuals in the population when using fitness functions (2) and (3)
z_df = data.frame(z=z, z2=(z-mean(z))^2, w2=w2, w3=w3)
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w2
p1 = ggplot(data=z_df, aes(x=z, y=w2))+
geom_point()+
xlab("Trait values")+ylab("Fitness (function #2)")+
geom_smooth(method="lm", se=F)+
theme_pubr()
p2 = ggplot(data=z_df, aes(x=z2, y=w2))+
geom_point()+
xlab("Squared deviation of trait values to the mean")+ylab("Fitness (function #2)")+
geom_smooth(method="lm", se=F)+
theme_pubr()
# Creating plots with the regression between z and w2, as well as (z-mean(z))^2 for w3
p3 = ggplot(data=z_df, aes(x=z, y=w3))+
geom_point()+
xlab("Trait values")+ylab("Fitness (function #3)")+
geom_smooth(method="lm", se=F)+
theme_pubr()
p4 = ggplot(data=z_df, aes(x=z2, y=w3))+
geom_point()+
xlab("Squared deviation of trait values to the mean")+ylab("Fitness (function #3)")+
geom_smooth(method="lm", se=F)+
theme_pubr()
# Combining all plots using the patchwork package
p1+p2+p3+p4 + plot_annotation(tag_levels=c("a"))
D(x^2, x)
D(x^2, "x")
D(expression(x^2), "x")
g<-D(expression(x^2), "x")
g
str(g)
g(2)
g<-D(expression(exp(-a*(theta-z)^2)), "z")
g
g<-D(expression(log(exp(-a*(theta-z)^2))), "z")
g
g<-D(expression(-a*(theta-z)^2), "z")
g
a*(2*(theta - z))
a<-0.2
g<-D(expression(-a*(theta-z)^2), "z")
g
library(reshape2)
library(ggplot2)
library(ggpubr)
x_dp = c()
y_dp = c()
x_p0 = 0.3
y_p0 = 0.3
x_dp[1] = x_p0
y_dp[1] = y_p0
sx = 0.2
sy = 0.1
AA = 1
AB = 0
BA = 0
BB = 1
Q = matrix(data=c(AA,BA,AB,BB), nrow=2, ncol=2)
rownames(Q)=c("Ax", "Bx")
colnames(Q)=c("Ay", "By")
View(Q)
