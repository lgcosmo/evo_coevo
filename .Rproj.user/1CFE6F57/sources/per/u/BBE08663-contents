# Step (1)

#Defining a function that takes as input the following parameters:

#A=Matrix of effects between alleles
#sx=Overall strength of ecological interactions on fitness of the victim species
#sy=Overall strength of ecological interactions on fitness of the exploiter species
#p0_x=Initial frequency of allele A of the victim species
#p0_y=Initial frequency of allele A of the exploiter

coevo<-function(A, sx, sy, tmax, p0_y, p0_x){ #Step (1)
  
  x_dp = c() #Creating vector to store values of the frequency of allele A for the victim species
  y_dp = c() #Creating vector to store values of the frequency of allele A for the exploiter species
  
  x_dp[1] = p0_x #Setting initial frequency of allele A for the victim species
  y_dp[1] = p0_y #Setting initial frequency of allele A for the exploiter species
  
  #For loop to iterate over the equation
  for(t in 1:(tmax-1)){
    
    # Step (2)
    
    xp = x_dp[t] #Setting current frequency of allele A for the victim species
    yp = y_dp[t] #Setting current frequency of allele A for the exploiter species
    
    # Step (3)
    
    x_wA = 1 - sx*(A[1,1]*yp + A[1,2]*(1-yp)) #Computing the fitness of allele A for the victim species
    x_wB = 1 - sx*(A[2,1]*yp + A[2,2]*(1-yp)) #Computing the fitness of allele B for the victim species
    x_avg_w = xp*x_wA + (1-xp)*x_wB #Computing the average fitness of the population of the victim species
    
    y_wA = 1 + sy*(A[1,1]*xp + A[2,1]*(1-xp)) #Computing the fitness of allele A for the exploiter species
    y_wB = 1 + sy*(A[1,2]*xp + A[2,2]*(1-xp)) #Computing the fitness of allele B for the exploiter species
    y_avg_w = yp*y_wA + (1-yp)*y_wB #Computing the average fitness of the population of the exploiter species
    
    # Step (4)
    
    x_dp[t+1]=xp + ((xp*(1-xp)*(x_wA-x_wB))/x_avg_w) #Using Wright's equaiton to compute frequency of A in the next generation for the victim species
    y_dp[t+1]=yp + ((yp*(1-yp)*(y_wA-y_wB))/y_avg_w) #Using Wright's equaiton to compute frequency of A in the next generation for the exploiter species
    
  }
  
  r=data.frame(x_dp, y_dp, t=1:tmax) # Step (5), creating a data frame with frequencies over time
  
  return(r)
  
}

A=matrix(data=c(1,0,0,1), nrow=2, ncol=2)
rownames(A)=c("Ax", "Bx") #Changing row names to facilitate visualization
colnames(A)=c("Ay", "By") #Changing column names to facilitate visualization

#Running the coevolutionary model
r=coevo(A=A, sx=0.1, sy=0.1, tmax=1000, p0_y=0.2, p0_x=0.2)

#Plotting the results

library(ggplot2)
library(ggpubr)

ggplot()+
  geom_line(data=r, aes(x=t, y=x_dp), color="royalblue3")+ # Frequency of allele A for victims, in blue
  geom_line(data=r, aes(x=t, y=y_dp), color="firebrick3")+ #Frequency of allele A for exploiters, in red
  xlab("Generations")+ylab("Frequency of allele A")+
  theme_pubr()
